"""
Basic database operations and connections.

This module provides the essential database operations and connections,
separate from the enhanced database functionality in db_enhanced.py.
"""

import os
import sqlite3
import logging
from pathlib import Path

# Configure logging
logger = logging.getLogger(__name__)

# Database paths - restore to original correct path
DB_PATH = "data/memory.sqlite"  # Updated for unified approach

def get_db_connection():
    """
    Get a connection to the SQLite database.
    Sets up the connection with row factory and WAL mode for better concurrency.
    
    Returns:
        sqlite3.Connection: Connection to the database
    """
    conn = None
    try:
        os.makedirs(os.path.dirname(DB_PATH), exist_ok=True)
        conn = sqlite3.connect(DB_PATH)
        conn.row_factory = sqlite3.Row
        # Re-enable WAL mode
        conn.execute("PRAGMA journal_mode=WAL;")
        logger.debug(f"Database connection established to {DB_PATH}")
        return conn
    except sqlite3.Error as e:
        logger.error(f"Database connection error: {e}")
        return None
    except Exception as e:
        logger.error(f"Unexpected error in get_db_connection: {e}")
        return None

def init_db():
    """
    Initialize the database with the required tables.
    This is a simplified version that only creates the memory_nodes table.
    The full version is in db_enhanced.py.
    """
    conn = None
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        
        logger.info("Initializing database tables...")
        
        # Create memory_nodes table
        cursor.execute('''
        CREATE TABLE IF NOT EXISTS memory_nodes (
            id TEXT PRIMARY KEY,
            type TEXT NOT NULL,
            content TEXT,
            tags TEXT, -- Stored as JSON array string
            created_at INTEGER NOT NULL,
            updated_at INTEGER NOT NULL,
            source_id TEXT, -- Optional: ID from the original source (e.g., tweet ID, reddit post ID)
            source_type TEXT, -- Optional: Type of the original source (e.g., 'twitter', 'reddit')
            metadata TEXT, -- Stored as JSON object string
            has_embedding BOOLEAN DEFAULT 0 -- Flag to indicate if embedding exists
        )
        ''')
        logger.info("Table 'memory_nodes' initialized.")

        # --- Add reddit_posts table creation --- 
        logger.info("--> Attempting to create 'reddit_posts' table...")
        cursor.execute('''
        CREATE TABLE IF NOT EXISTS reddit_posts (
            id TEXT PRIMARY KEY,              -- Reddit post ID (e.g., '1k0sbo8')
            subreddit TEXT NOT NULL,          -- Subreddit name (e.g., 'promptengineering')
            title TEXT,                       -- Post title
            author TEXT,                      -- Reddit author username
            created_utc TEXT NOT NULL,        -- Post creation time (ISO 8601 format string)
            score INTEGER,                    -- Post score (upvotes)
            upvote_ratio REAL,                -- Upvote ratio
            num_comments INTEGER,             -- Number of comments
            permalink TEXT,                   -- Full Reddit permalink URL
            url TEXT,                         -- Link URL (for link posts) or post URL
            selftext TEXT,                    -- Body text (for self posts)
            is_self BOOLEAN,                  -- True if it's a self post
            is_video BOOLEAN,                 -- True if post contains a video
            over_18 BOOLEAN,                  -- NSFW flag
            spoiler BOOLEAN,                  -- Spoiler flag
            stickied BOOLEAN,                 -- True if stickied
            scraped_at TEXT NOT NULL,         -- Timestamp when the post was scraped (ISO 8601)
            sentiment TEXT,                   -- Optional: Sentiment analysis result
            sentiment_score REAL,             -- Optional: Sentiment score
            keywords TEXT                     -- Optional: Extracted keywords (JSON array string)
            -- Add other fields as needed, e.g., is_summarized BOOLEAN DEFAULT 0
        )
        ''')
        logger.info("<-- Finished executing CREATE TABLE for 'reddit_posts'.")
        logger.info("Table 'reddit_posts' initialized.")
        # --- End reddit_posts table --- 

        # --- You might also need tables like: ---
        # CREATE TABLE IF NOT EXISTS tracked_subreddits (...);
        # CREATE TABLE IF NOT EXISTS tracked_tweets (...);
        # CREATE TABLE IF NOT EXISTS memory_edges (...);
        # --- Add them here if they are missing --- 
        
        conn.commit()
        logger.info("Database initialization complete.")
        
    except Exception as e:
        logger.error(f"Error initializing database: {e}", exc_info=True)
        if conn:
            conn.rollback()
    finally:
        if conn:
            conn.close()

# Ensure init_db is called somewhere at startup, e.g., in main.py
# init_db() 